#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <conio.h>
#include <string.h>
#include <cstdlib>
using namespace std;
struct date {
	char day[100];
	char month[100];
	char year[100];
};
struct student {
	int no;
	char id[100];
	char lastname[100];
	char firstname[100];
	char sex[100];
	date birth;
};
struct time {
	char hour[5];
	char minute[5];
};
struct course
{
	int no;
	char id[100];
	char name[100];
	char classn[100];
	char lecture[100];
	date start;
	date end;
	char day[100];
	time start1;
	time end1;
	char room[100];
};
struct password
{
	int no;
	char id[100];
	char user[100];
	char pass[100];
};
struct nodepw
{
	password data;
	nodepw *next;
};
struct listpw
{
	nodepw *head;
	nodepw *tail;
};
struct nodest
{
	student data;
	nodest *next;
};
struct listst
{
	nodest *head;
	nodest *tail;
};
struct nodecr
{
	course data;
	nodecr *next;
};
struct listcr
{
	nodecr *head;
	nodecr *tail;
};
void init(listpw &l)
{
	l.head = l.tail = NULL;
}
void init(listst &l)
{
	l.head = l.tail = NULL;
}
void init(listcr &l)
{
	l.head = l.tail = NULL;
}
nodepw *createNode(password x)
{
	nodepw *p = new nodepw;
	p->next = NULL;
	p->data = x;
	return p;
}
nodest *createNode(student x)
{
	nodest *p = new nodest;
	p->next = NULL;
	p->data = x;
	return p;
}
nodecr *createNode(course x)
{
	nodecr *p = new nodecr;
	p->next = NULL;
	p->data = x;
	return p;
}
void insertTail(listst &l, nodest *p)
{
	if (l.head == NULL)
	{
		l.head = l.tail = p;
	}
	else
	{
		l.tail->next = p;
		l.tail = p;
	}
}
void insertTail(listcr &l, nodecr *p)
{
	if (l.head == NULL)
	{
		l.head = l.tail = p;
	}
	else
	{
		l.tail->next = p;
		l.tail = p;
	}
}
int login(listpw pw, char y[], listst st);
void menu(listpw pw, listst st); /*-------------------------*/

void insertTail(listpw &l, nodepw *p)
{
	if (l.head == NULL)
	{
		l.head = l.tail = p;
	}
	else
	{
		l.tail->next = p;
		l.tail = p;
	}
}
bool loadPassword(const char *path, listpw &l, char b[])
{
	ifstream fin;
	fin.open(path);
	if (fin.fail())
		return false;
	init(l);
	password pw;
	fin.getline(b, 200, '\n');
	while (fin >> pw.no)
	{
		fin.get();
		fin.getline(pw.id, 15, ',');
		fin.getline(pw.user, 15, ',');
		fin.getline(pw.pass, 15, '\n');
		nodepw *p = createNode(pw);
		insertTail(l, p);
	}
	fin.close();
	return true;
}
bool savePassword(const char *path, listpw &l)
{
	ofstream fout;
	fout.open(path);
	if (fout.fail())
		return false;
	fout << "no, id, user, pass" << endl;
	for (nodepw *p = l.head; p != NULL; p = p->next)
	{
		password pw = p->data;
		if (pw.no < 0) break;
		fout << pw.no << ","<< pw.id << ","<< pw.user << "," << pw.pass <<endl;
	}
	fout.close();
	return true;
}
bool loadStudent(const char *path, listst &l, char b[])
{
	ifstream fin;
	fin.open(path);
	if (fin.fail())
		return false;
	init(l);
	student st;
	fin.getline(b, 200, '\n');
	while (fin >> st.no)
	{
		fin.get();
		fin.getline(st.id, 9, ',');
		fin.getline(st.lastname, 101, ',');
		fin.getline(st.firstname, 101, ',');
		fin.getline(st.sex, 10, ',');
		fin.getline(st.birth.month, 5, '/');
		fin.getline(st.birth.day, 5, '/');
		fin.getline(st.birth.year, 5, '\n');
		nodest *p = createNode(st);
		insertTail(l, p);
	}
	fin.close();
	return true;
}
bool saveStudent(const char *path, listst &l, char b[])
{
	ofstream fout;
	fout.open(path);
	if (fout.fail())
		return false;
	fout << b << endl;
	for (nodest *p = l.head; p != NULL; p = p->next)
	{
		student st = p->data;
		if (st.no < 0) break;
		fout << st.no << "," << st.id << "," << st.lastname << "," << st.firstname << "," << st.sex << "," << st.birth.month << "/" << st.birth.day << "/" << st.birth.year << endl;
	}
	fout.close();
	return true;
}

bool loadCourse(const char *path, listcr &l, char b[])
{
	ifstream fin;
	fin.open(path);
	if (fin.fail())
		return false;
	init(l);
	fin.getline(b, 200, '\n');
	course cr;
	while (fin >> cr.no)
	{
		fin.get();
		fin.getline(cr.id, 10, ',');
		fin.getline(cr.name, 100, ',');
		fin.getline(cr.classn, 7, ',');
		fin.getline(cr.lecture, 100, ',');
		fin.getline(cr.start.day, 5, '/');
		fin.getline(cr.start.month, 5, '/');
		fin.getline(cr.start.year, 5, ',');
		fin.getline(cr.end.day, 5, '/');
		fin.getline(cr.end.month, 5, '/');
		fin.getline(cr.end.year, 5, ',');
		fin.getline(cr.day, 10, ',');
		fin.getline(cr.start1.hour, 3, ':');
		fin.getline(cr.start1.minute, 3, ',');
		fin.getline(cr.end1.hour, 6, ':');
		fin.getline(cr.end1.minute, 6, ',');
		fin.getline(cr.room, 10, '\n');
		nodecr *p = createNode(cr);
		insertTail(l, p);
	}
	fin.close();
	return true;
}

bool saveCourse(const char *path, listcr &l, char b[])
{
	ofstream fout;
	fout.open(path);

	if (fout.fail())
		return false;

	int i = 0;
	fout << b << endl;
	for (nodecr *p = l.head; p != NULL; p = p->next)
	{
		course cr = p->data;
		if (cr.no < 0) break;
		fout << cr.no << "," << cr.id << "," << cr.name << "," << cr.classn << "," << cr.lecture << "," << cr.start.month << "/" << cr.start.day << "/" << cr.start.year << ',' << cr.end.month << "/" << cr.end.day << "/" << cr.end.year << ',' << cr.day << ',' << cr.start1.hour << ':' << cr.start1.minute << ',' << cr.end1.hour << ':' << cr.end1.minute << ',' << cr.room << endl;
	}
	fout.close();
	return true;
}
void addnewstudent(listst &l, listpw &lpw)
{
	student st;
	cout << "Add new student to a class" << endl;
	st.no = l.tail->data.no + 1;
	cout << "Enter ID: ";
	cin >> st.id;
	cin.get();
	cout << "Enter Lastname: ";
	cin.getline(st.lastname, '/n');
	cout << "Enter Firstname: ";
	cin >> st.firstname;
	do
	{
		cout << "Enter gender(Male/Female): ";
		cin >> st.sex;
	} while ((strcmp(st.sex, "Male") != 0 && strcmp(st.sex, "Female") != 0) && cout << "You can only enter Male/Female");
	cout << "Enter day of DOB: ";
	cin >> st.birth.day;
	cout << "Enter month of DOB: ";
	cin >> st.birth.month;
	cout << "Enter year of DOB: ";
	cin >> st.birth.year;
	nodest*p = createNode(st);
	insertTail(l, p);

	password pa;
	pa.no = st.no;
	strcpy(pa.id, st.id);
	strcpy(pa.user, st.id);
	strcpy(pa.pass, st.birth.day);
	strcat(pa.pass, st.birth.month);
	strcat(pa.pass, st.birth.year);
	nodepw*pw = createNode(pa);
	insertTail(lpw, pw);
}
void inputpassword(char password[])
{
	int i = 0;
	for (char c; (c = _getch());)
	{
		if (c == '\n' || c == '\r') 
		{
            cout << "\n";
            break;
        } else if (c == '\b') 
		{
            cout << "\b \b";
			if (i != 0)
				password[i-1] = NULL;
			i++;
        } else if (c == -32) 
		{
            _getch();
        } else if (isprint(c))
		{
            cout << '*';
            password[i++] = c;
        }
	}
	password[i] = NULL;
}
void editstudent(listst &l)
{
	char ID[100];
	int check;
	char temp[100];
	cout << "Edit an existing student" << endl;
	cout << "Input the student ID of the student: ";
	cin >> ID;
	nodest* head = l.head;
	nodest*current = head;
	while (current != l.tail)
	{
		if (strcmp(current->data.id, ID) == 0)
		{
			do
			{
				cout << "Please input the one you want to edit: " << endl;
				cout << "1. Edit Student ID" << endl;
				cout << "2. Edit Lastname" << endl;
				cout << "3. Edit Firstname" << endl;
				cout << "4. Edit Gender" << endl;
				cout << "5. Edit D.O.B" << endl;
				cout << "6. Done" << endl;
				cin >> check;
				switch (check)
				{
				case 1:
				{
					cout << "Input new Student ID: ";
					cin >> temp;
					strcpy(current->data.id, temp);
					cout << "DONE" << endl;
					break;
				}
				case 2:
				{
					cin.get();
					cout << "Enter new Lastname: ";
					cin.getline(temp, '/n');
					strcpy(current->data.lastname, temp);
					cout << "DONE" << endl;
					break;
				}
				case 3:
				{
					cout << "Enter new Firstname: ";
					cin >> temp;
					strcpy(current->data.firstname, temp);
					cout << "DONE" << endl;
					break;
				}
				case 4:
				{
					do
					{
						cout << "Enter new gender(Male/Female): ";
						cin >> temp;
					} while ((strcmp(temp, "Male") != 0 && strcmp(temp, "Female") != 0) && cout << "Error!! Please try again!" << endl);
					strcpy(current->data.sex, temp);
					cout << "DONE" << endl;
					break;
				}
				case 5:
				{
					cout << "Enter new day of D.O.B:";
					cin >> temp;
					strcpy(current->data.birth.day, temp);
					cout << "Enter new month of D.O.B:";
					cin >> temp;
					strcpy(current->data.birth.month, temp);
					cout << "Enter new year of D.O.B:";
					cin >> temp;
					strcpy(current->data.birth.year, temp);
					cout << "DONE" << endl;
					break;
				}
				case 6:
				{
					break;
				}
				default: cout << "You can only input from 1 to 6" << endl;
				}
			} while (check != 6);
			return;
		}
		current = current->next;
	}
}
void classmenu(listst &st, listpw &pw)
{
	cout << "Class:" << endl;
	cout << "1: Import students of a class" << endl;
	cout << "2: Add a new student" << endl;
	cout << "3: Edit an exitsing student" << endl;
	cout << "4: Remove astudent" << endl;
	cout << "5: Change student of a classes" << endl;
	cout << "6: View list of classes" << endl;
	cout << "7: View list of student in a class" << endl;
	int s;
	char savest[100];
	char savepw[100];
	char import[100];
	cout << "Let's choose request you want: " << endl;
	cin >> s;
	switch (s)
	{
	case 1: 
	{
//		cout << "Enter the path of the file to load: ";
//		cin >> import;
//		cout << endl;
//		loadStudent(import, st, savest);
		break; 
	};
	case 2: 
	{
		addnewstudent(st, pw);
		saveStudent("D:/outputCLC1.csv",st, savest);
		savePassword("D:/Password.csv", pw);
		cout << "Add new student success full" << endl;
		break; 
	};
	case 3: 
	{
		editstudent(st);
		saveStudent("D:/outputCLC1.csv", st, savest);
		cout << "Edit an exitsing student success full" << endl;
		break; 
	};
	case 4: {break; };
	case 5: {break; };
	case 6: {break; };
	case 7: {break; };
	default:
		system("cls");
		cout << "Incorrect,please enter again! " << endl;
		system("cls");
		classmenu(st, pw);
		break;
	}
}
void staffmenu(listst &st, listpw &pw)
{
	cout << "Staffmenu: " << endl;
	cout << "1: class" << endl;
	cout << "2: course" << endl;
	cout << "3: scoreboard" << endl;
	cout << "4: attendance List" << endl;
	cout << "5: logout" << endl;
	int s;
	cout << "Let's choose the function you want: " << endl;
	cin >> s;
	switch (s)
	{
	case 1: 
	{
		classmenu(st, pw);
		break; 
	};
	case 2: {break; };
	case 3: {break; };
	case 4: {break; };
	case 5: {break; };
	default:
		system("cls");
		cout << "Incorrect,please enter again! " << endl;
		system("cls");
		staffmenu(st, pw);
	}
}
void lecturermenu()
{
	cout << "Lecturemenu: " << endl;
	cout << "1: managestudent" << endl;
	cout << "2: lessonplan" << endl;
	cout << "3: research" << endl;
	cout << "4: logout" << endl;
	int s;
	cout << "Let's choose the function you want: " << endl;
	cin >> s;
	switch (s)	
	{
	case 1: {break; };
	case 2: {break; };
	case 3: {break; };
	case 4: {break; };
	default:
		system("cls");
		cout << "Incorrect,please enter again! " << endl;

		lecturermenu();
	}
}

void studentmenu(listpw pw, char y[], listst st)
{
	for (nodest *p = st.head; p != NULL; p = p->next)
	{
		if (strcmp(y, p->data.id) == 0)
			cout << p->data.no << endl << p->data.id
			<< endl << p->data.lastname << " "
			<< p->data.firstname << endl << p->data.sex
			<< endl << p->data.birth.month << "/"
			<< p->data.birth.day << "/" << p->data.birth.year << endl;
	}
	cout << "Studentmenu: " << endl;
	cout << "1: study" << endl;
	cout << "2: dohomework" << endl;
	cout << "3: preparelesson" << endl;
	cout << "4: logout" << endl;
	int s;
	cout << "Let's choose the function you want: " << endl;
	cin >> s;
	switch (s)
	{
	case 1: {break; };
	case 2: {break; };
	case 3: {break; };
	case 4: {
		menu(pw, st);
		break; };

	default:
		system("cls");
		cout << "Incorrect,please enter again! " << endl;

		studentmenu(pw, y, st);
	}

}
void changePassword(listpw &l, char user[50], char password[50])
{
	char check[50];
	char a[50], b[50];
	do
	{
		cout << "Enter your old password: ";
		cin >> check;
		if (strcmp(check, password) == 0)
		{
			do
			{
				cout << "Enter new password: ";
				inputpassword(a);
				cout << "Enter new password again: ";
				inputpassword(b);
				if (strcmp(a, b) == 0)
				{
					nodepw*p = l.head;
					while (p != NULL)
					{
						if (strcmp(p->data.user, user) == 0)
						{
							strcpy(p->data.pass, a);
							savePassword("D:/Password.csv", l);
							return;
						}
						p = p->next;
					}
				}
			} while (a != b);
		}
	} while ((strcmp(check, password) != 0) && cout << "Wrong!! Please do it again!" << endl);
}

int login(listpw pw, char y[], listst st)
{
	char user[9];
	char password[50];
	int index = 0;
	int temp = 0;
	cout << "Select: " << endl;
		do
		{
			cout << "1: Login" << endl;
			cout << "2: Change Password" << endl;
			cin >> temp;
		} while (temp > 2);
		do
		{
		if (index == 1) cout << "Please, Enter again" << endl;
		index = 0;
		cout << "username: ";
		cin >> user;
		cout << "password: ";
		inputpassword(password);
		if (temp == 1)
		{
			nodepw *lpw = pw.head;
			while (lpw != NULL)
			{
				if (strcmp(user, lpw->data.user) == 0 && strcmp(password, lpw->data.pass) == 0)
				{
					strcpy(y, user);
					if (user[0] < 'A')
						return 3;
					else if (strcmp(user, "admin") == 0)
						return 1;
					else
						return 2;
				}
				else index = 1;
				lpw = lpw->next;
			}
		}
		else changePassword(pw, user, password);
	} while (index == 1);
}
void menu(listpw pw, listst st)
{
	cout << "1: login" << endl;
	cout << "2: exit" << endl;
	int x;
	int x1;
	cout << "Please enter " << endl;
	cin >> x;
	char y[11];
	if (x == 1)
	{
		x1 = login(pw, y, st);
		if (x1 == 1)
		{
			system("cls");
			staffmenu(st, pw);

		}
		if (x1 == 2)
		{
			system("cls");
			lecturermenu();

		}
		if (x1 == 3)
		{
			system("cls");
			studentmenu(pw, y, st);

		}
	}
	else if (x == 2)
	{
		cout << "Have a nice day!" << endl;
		system("pause");
		exit(0);

	}
	else
	{
		system("cls");
		cout << "Invalid,please enter again!" << endl;

		menu(pw, st);
	}
}

void main()
{
	listpw pw;
	listst st;
	listcr cr;
	char a[200];
	char b[200];
	char c[200];
	//for (Node *lp = l.head; lp != NULL; lp = lp->next)
//	{
		int k = loadPassword("D:/Password.csv", pw, a);
		int h = loadStudent("D:/18CLC1.csv", st, b);
		int z = loadCourse("D:/CoursesCLC1.csv", cr, c);
//	}
	if (h)
	{
		h = saveStudent("D:/outputCLC1.csv", st, b);
		if (h)
		{
			cout << "Load Student file success full" << endl;
		}
	}
	if (z)
	{
		z = saveCourse("D:/outputcourseCLC1.csv", cr, c);
		if (z)
		{
			cout << "Load Course file success full" << endl;
		}
	}
	else cout << "Can not load data";
	if (k)
	{
		k = savePassword("D:/outputCLC1.csv", pw);
		if (k)
		{
			cout << "Load Password file success full" << endl;
		}
	}
	menu(pw, st);
	_getch();
}
