#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <conio.h>
#include <string.h>
#include <cstdlib>
using namespace std;
struct date {
	char day[100];
	char month[100];
	char year[100];
};
struct student {
	int no;
	char id[100];
	char lastname[100];
	char firstname[100];
	char sex[100];
	date birth;
};
struct time {
	char hour[5];
	char minute[5];
};
struct course
{
	int no;
	char id[100];
	char name[100];
	char classn[100];
	char lecture[100];
	date start;
	date end;
	char day[100];
	time start1;
	time end1;
	char room[100];
};
struct password
{
	int no;
	char id[100];
	char user[100];
	char pass[100];
};
struct nodepw
{
	password data;
	nodepw *next;
};
struct listpw
{
	nodepw *head;
	nodepw *tail;
};
struct nodest
{
	student data;
	nodest *next;
};
struct listst
{
	nodest *head;
	nodest *tail;
};
struct nodecr
{
	course data;
	nodecr *next;
};
struct listcr
{
	nodecr *head;
	nodecr *tail;
};
struct nameall
{
	char name[100];
};
struct savenameall
{
	char savename[100];
};
struct nodeallstsave
{
	savenameall data;
	nodeallstsave *next;
};
struct nodeallst
{
	nameall data;
	nodeallst *next;
};
struct listallst
{
	nodeallst *head;
	nodeallst *tail;
};
struct listallstsave
{
	nodeallstsave *head;
	nodeallstsave *tail;
};
void init(listallst &l)
{
	l.head = l.tail = NULL;
}
void init(listpw &l)
{
	l.head = l.tail = NULL;
}
void init(listst &l)
{
	l.head = l.tail = NULL;
}
void init(listcr &l)
{
	l.head = l.tail = NULL;
}
void init(listallstsave &l)
{
	l.head = l.tail = NULL;
}
nodeallst *createNode(nameall x)
{
	nodeallst *p = new nodeallst;
	p->next = NULL;
	p->data = x;
	return p;
}
nodeallstsave *createNode(savenameall x)
{
	nodeallstsave *p = new nodeallstsave;
	p->next = NULL;
	p->data = x;
	return p;
}
nodepw *createNode(password x)
{
	nodepw *p = new nodepw;
	p->next = NULL;
	p->data = x;
	return p;
}
nodest *createNode(student x)
{
	nodest *p = new nodest;
	p->next = NULL;
	p->data = x;
	return p;
}
nodecr *createNode(course x)
{
	nodecr *p = new nodecr;
	p->next = NULL;
	p->data = x;
	return p;
}
void insertTail(listallst &l, nodeallst *p)
{
	if (l.head == NULL)
	{
		l.head = l.tail = p;
	}
	else
	{
		l.tail->next = p;
		l.tail = p;
	}
}
void insertTail(listallstsave &l, nodeallstsave *p)
{
	if (l.head == NULL)
	{
		l.head = l.tail = p;
	}
	else
	{
		l.tail->next = p;
		l.tail = p;
	}
}
void insertTail(listst &lst, nodest *p)
{
	if (lst.head == NULL)
	{
		lst.head = lst.tail = p;
	}
	else
	{
		lst.tail->next = p;
		lst.tail = p;
	}
}
void insertTail(listcr &l, nodecr *p)
{
	if (l.head == NULL)
	{
		l.head = l.tail = p;
	}
	else
	{
		l.tail->next = p;
		l.tail = p;
	}
}
int login(listpw pw, char y[], listst st);
void menu(listallst &last, listst *&lst, listpw &pw, int &i);/////////////////////

void insertTail(listpw &l, nodepw *p)
{
	if (l.head == NULL)
	{
		l.head = l.tail = p;
	}
	else
	{
		l.tail->next = p;
		l.tail = p;
	}
}
bool loadPassword(const char *path, listpw &l, char b[])
{
	ifstream fin;
	fin.open(path);
	if (fin.fail())
		return false;
	init(l);
	password pw;
	fin.getline(b, 200, '\n');
	while (fin >> pw.no)
	{
		fin.get();
		fin.getline(pw.id, 15, ',');
		fin.getline(pw.user, 15, ',');
		fin.getline(pw.pass, 15, '\n');
		nodepw *p = createNode(pw);
		insertTail(l, p);
	}
	fin.close();
	return true;
}
bool savePassword(const char *path, listpw &l)
{
	ofstream fout;
	fout.open(path);
	if (fout.fail())
		return false;
	fout << "no, id, user, pass" << endl;
	for (nodepw *p = l.head; p != NULL; p = p->next)
	{
		password pw = p->data;
		if (pw.no < 0) break;
		fout << pw.no << "," << pw.id << "," << pw.user << "," << pw.pass << endl;
	}
	fout.close();
	return true;
}
bool loadAllStudentSave(listallstsave &lasts)
{
	ifstream fin;
	fin.open("SaveAllStudent.csv");
	if (fin.fail())
		return false;
	savenameall sna;
	init(lasts);
	while (fin.getline(sna.savename, 30, '\n'))
	{
		nodeallstsave *p = createNode(sna);
		insertTail(lasts, p);
	}
	fin.close();
	return true;
}
bool loadAllStudent(listallst &last)
{
	ifstream fin;
	fin.open("AllStudents.csv");
	if (fin.fail())
		return false;
	nameall nall;
	init(last);
	while (fin.getline(nall.name, 30, '\n'))
	{
		nodeallst *p = createNode(nall);
		insertTail(last, p);
	}
	fin.close();
	return true;
}
void loadStudent(nodeallst*t, listst &lst)
{
	ifstream fin;
	fin.open(t->data.name);
	char b[100];
	init(lst);
	student st;
	fin.getline(b, 50, '\n');
	while (fin >> st.no)
	{
		fin.get();
		fin.getline(st.id, 9, ',');
		fin.getline(st.lastname, 101, ',');
		fin.getline(st.firstname, 101, ',');
		fin.getline(st.sex, 10, ',');
		fin.getline(st.birth.month, 5, '/');
		fin.getline(st.birth.day, 5, '/');
		fin.getline(st.birth.year, 5, '\n');
		nodest *p = createNode(st);
		insertTail(lst, p);
	}
	fin.close();
	return;
}
void saveStudent(const char *path, listst &lst)
{
	ofstream fout;
	fout.open(path);
	char b[100];
	fout << "No,Student ID,Lastname,Firstname,Gender,DoB" << endl;
	for (nodest *p = lst.head; p != NULL; p = p->next)
	{
		student st = p->data;
		if (st.no < 0) break;
		fout << st.no << "," << st.id << "," << st.lastname << "," << st.firstname << "," << st.sex << "," << st.birth.month << "/" << st.birth.day << "/" << st.birth.year << endl;
	}
	fout.close();
}
bool loadall(listst*&lst, listallst &last)
{
	loadAllStudent(last);
	ifstream fin;
	fin.open("SaveAllStudent.csv");
	if (!fin.is_open() && loadAllStudent(last) == false)
		return false;
	char load[300];
	char save[100];
	nameall x;
	int i = 0;
	for (nodeallst *p = last.head; p != NULL; p = p->next)
	{
		loadStudent(p, lst[i]);
		fin.getline(save, 30, '\n');
		saveStudent(save, lst[i]);
		i++;
	}
	fin.close();
	return true;
}

bool loadCourse(const char *path, listcr &l, char b[])
{
	ifstream fin;
	fin.open(path);
	if (fin.fail())
		return false;
	init(l);
	fin.getline(b, 200, '\n');
	course cr;
	while (fin >> cr.no)
	{
		fin.get();
		fin.getline(cr.id, 10, ',');
		fin.getline(cr.name, 100, ',');
		fin.getline(cr.classn, 7, ',');
		fin.getline(cr.lecture, 100, ',');
		fin.getline(cr.start.day, 5, '/');
		fin.getline(cr.start.month, 5, '/');
		fin.getline(cr.start.year, 5, ',');
		fin.getline(cr.end.day, 5, '/');
		fin.getline(cr.end.month, 5, '/');
		fin.getline(cr.end.year, 5, ',');
		fin.getline(cr.day, 10, ',');
		fin.getline(cr.start1.hour, 3, ':');
		fin.getline(cr.start1.minute, 3, ',');
		fin.getline(cr.end1.hour, 6, ':');
		fin.getline(cr.end1.minute, 6, ',');
		fin.getline(cr.room, 10, '\n');
		nodecr *p = createNode(cr);
		insertTail(l, p);
	}
	fin.close();
	return true;
}

bool saveCourse(const char *path, listcr &l, char b[])
{
	ofstream fout;
	fout.open(path);

	if (fout.fail())
		return false;

	int i = 0;
	fout << b << endl;
	for (nodecr *p = l.head; p != NULL; p = p->next)
	{
		course cr = p->data;
		if (cr.no < 0) break;
		fout << cr.no << "," << cr.id << "," << cr.name << "," << cr.classn << "," << cr.lecture << "," << cr.start.month << "/" << cr.start.day << "/" << cr.start.year << ',' << cr.end.month << "/" << cr.end.day << "/" << cr.end.year << ',' << cr.day << ',' << cr.start1.hour << ':' << cr.start1.minute << ',' << cr.end1.hour << ':' << cr.end1.minute << ',' << cr.room << endl;
	}
	fout.close();
	return true;
}
void addnewstudent(listst &lst, listpw &lpw, int i)
{
	student st;
	cout << "Add new student to a class" << endl;
	st.no = lst.tail->data.no + 1;
	cout << "Enter ID: ";
	cin >> st.id;
	cin.get();
	cout << "Enter Lastname: ";
	cin.getline(st.lastname, '/n');
	cout << "Enter Firstname: ";
	cin >> st.firstname;
	do
	{
		cout << "Enter gender(Male/Female): ";
		cin >> st.sex;
	} while ((strcmp(st.sex, "Male") != 0 && strcmp(st.sex, "Female") != 0) && cout << "You can only enter Male/Female");
	cout << "Enter day of DOB: ";
	cin >> st.birth.day;
	cout << "Enter month of DOB: ";
	cin >> st.birth.month;
	cout << "Enter year of DOB: ";
	cin >> st.birth.year;
	nodest*p = createNode(st);
	insertTail(lst, p);

	password pa;
	pa.no = st.no;
	strcpy(pa.id, st.id);
	strcpy(pa.user, st.id);
	strcpy(pa.pass, st.birth.day);
	strcat(pa.pass, st.birth.month);
	strcat(pa.pass, st.birth.year);
	nodepw*pw = createNode(pa);
	insertTail(lpw, pw);
}
/*void importClass(listallst &last,listst &lst, listpw &pw, listallstsave &lasts,nameall a, savenameall b)
{
	cout << "Import student of a class from a csv file" << endl;
	nodeallst *p = createNode(a);
	insertTail(last, p);
	nodeallstsave *t = createNode(b);
	insertTail(lasts, t);
	loadAllStudentSave(lasts.tail->data)
}*/
void inputpassword(char password[])
{
	int i = 0;
	for (char c; (c = _getch());)
	{
		if (c == '\n' || c == '\r')
		{
			cout << "\n";
			break;
		}
		else if (c == '\b')
		{
			cout << "\b \b";
			if (i != 0)
				password[i - 1] = NULL;
			i++;
		}
		else if (c == -32)
		{
			_getch();
		}
		else if (isprint(c))
		{
			cout << '*';
			password[i++] = c;
		}
	}
	password[i] = NULL;
}
bool editstudent(listst &lst, char ID[])
{
	int check;
	char temp[100];
	nodest* head = lst.head;
	nodest*current = head;
	while (current != lst.tail)
	{
		if (strcmp(current->data.id, ID) == 0)
		{
			do
			{
				cout << "Please input the one you want to edit: " << endl;
				cout << "1. Edit Student ID" << endl;
				cout << "2. Edit Lastname" << endl;
				cout << "3. Edit Firstname" << endl;
				cout << "4. Edit Gender" << endl;
				cout << "5. Edit D.O.B" << endl;
				cout << "6. Done" << endl;
				cin >> check;
				switch (check)
				{
				case 1:
				{
					cout << "Input new Student ID: ";
					cin >> temp;
					strcpy(current->data.id, temp);
					cout << "DONE" << endl;
					break;
				}
				case 2:
				{
					cin.get();
					cout << "Enter new Lastname: ";
					cin.getline(temp, '/n');
					strcpy(current->data.lastname, temp);
					cout << "DONE" << endl;
					break;
				}
				case 3:
				{
					cout << "Enter new Firstname: ";
					cin >> temp;
					strcpy(current->data.firstname, temp);
					cout << "DONE" << endl;
					break;
				}
				case 4:
				{
					do
					{
						cout << "Enter new gender(Male/Female): ";
						cin >> temp;
					} while ((strcmp(temp, "Male") != 0 && strcmp(temp, "Female") != 0) && cout << "Error!! Please try again!" << endl);
					strcpy(current->data.sex, temp);
					cout << "DONE" << endl;
					break;
				}
				case 5:
				{
					cout << "Enter new day of D.O.B:";
					cin >> temp;
					strcpy(current->data.birth.day, temp);
					cout << "Enter new month of D.O.B:";
					cin >> temp;
					strcpy(current->data.birth.month, temp);
					cout << "Enter new year of D.O.B:";
					cin >> temp;
					strcpy(current->data.birth.year, temp);
					cout << "DONE" << endl;
					break;
				}
				case 6:
				{
					break;
				}
				default: cout << "You can only input from 1 to 6" << endl;
				}
			} while (check != 6);
			return true;
		}
		current = current->next;
	}
}
bool outputClass(listallst &last)
{
	ifstream fin;
	fin.open("AllStudents.csv");
	if (fin.fail())
		return false;
	nameall nall;
	int i = 1;
	init(last);
	while (fin.getline(nall.name, 30, '\n'))
	{
		nodeallst *p = createNode(nall);
		insertTail(last, p);
		cout<< " "<< i <<" : " << nall.name << endl;
		i++;
	}
	fin.close();
	return true;
}
int listn()
{
	ifstream fin;
	fin.open("AllStudents.csv");
	char a[100];
	int n = 0;
	while (fin.getline(a, 30, '\n'))
	{
		n++;
	}
	return n;
}
void classmenu(listallst &last, listst *&lst, listpw &pw, int i)
{
	cout << "Class:" << endl;
	cout << "1: Import students of a class" << endl;
	cout << "2: Add a new student" << endl;
	cout << "3: Edit an exitsing student" << endl;
	cout << "4: Remove astudent" << endl;
	cout << "5: Change student of a classes" << endl;
	cout << "6: View list of classes" << endl;
	cout << "7: View list of student in a class" << endl;
	int s;
	char savest[100];
	char savepw[100];
	char import[100];
	cout << "Let's choose request you want: " << endl;
	cin >> s;
	switch (s)
	{
	case 1:
	{
		
		break;
	};
	case 2:
	{
		char a[30];
		outputClass(last);
		cout << "Choose class: ";
		cin >> i;
		addnewstudent(lst[i], pw, i);
		cout << "Choose save class (suggest: 18CLC"<< i <<"SaveStudent.csv): ";
		cin >> a;
		saveStudent(a, lst[i]);
		savePassword("D:/Password.csv", pw);
		cout << "Add new student success full" << endl;
		break;
	};
	case 3:
	{
		char ID[100];
		char a[30];
		cout << "Edit an existing student" << endl;
		cout << "Input the student ID of the student: ";
		cin >> ID;
		for (int i = 0; i < listn(); i++)
		{
			if (editstudent(lst[i], ID))
			{
				cout << "Choose save class (suggest: 18CLC" << i << "SaveStudent.csv): ";
				cin >> a;
				saveStudent(a, lst[i]);
			}
		}
		cout << "Edit an exitsing student success full" << endl;
		break;
	};
	case 4: {break; };
	case 5: {break; };
	case 6: {break; };
	case 7: {break; };
	default:
		system("cls");
		cout << "Incorrect,please enter again! " << endl;
		system("cls");
		classmenu(last, lst, pw, i);
		break;
	}
}
void staffmenu(listallst &last, listst *&lst, listpw &pw, int i)
{
	cout << "Staffmenu: " << endl;
	cout << "1: class" << endl;
	cout << "2: course" << endl;
	cout << "3: scoreboard" << endl;
	cout << "4: attendance List" << endl;
	cout << "5: logout" << endl;
	int s;
	cout << "Let's choose the function you want: " << endl;
	cin >> s;
	switch (s)
	{
	case 1:
	{
		classmenu(last,lst, pw,i);
		break;
	};
	case 2: {break; };
	case 3: {break; };
	case 4: {break; };
	case 5: {break; };
	default:
		system("cls");
		cout << "Incorrect,please enter again! " << endl;
		system("cls");
		staffmenu(last, lst, pw, i);
	}
}
void lecturermenu()
{
	cout << "Lecturemenu: " << endl;
	cout << "1: managestudent" << endl;
	cout << "2: lessonplan" << endl;
	cout << "3: research" << endl;
	cout << "4: logout" << endl;
	int s;
	cout << "Let's choose the function you want: " << endl;
	cin >> s;
	switch (s)
	{
	case 1: {break; };
	case 2: {break; };
	case 3: {break; };
	case 4: {break; };
	default:
		system("cls");
		cout << "Incorrect,please enter again! " << endl;

		lecturermenu();
	}
}

void studentmenu(listpw &pw, char y[], listst *&lst, listallst &last, int i)
{
	int check = 0;
	for (int i = 0; i < listn(); i++)
	{
		for (nodest *p = lst[i].head; p != NULL; p = p->next)
		{
			if (strcmp(y, p->data.id) == 0)
			{
				cout << p->data.no << endl << p->data.id
					<< endl << p->data.lastname << " "
					<< p->data.firstname << endl << p->data.sex
					<< endl << p->data.birth.month << "/"
					<< p->data.birth.day << "/" << p->data.birth.year << endl;
				check = 1;
			}
		}
		if (check == 1)
		{
			cout << "Studentmenu: " << endl;
			cout << "1: study" << endl;
			cout << "2: dohomework" << endl;
			cout << "3: preparelesson" << endl;
			cout << "4: logout" << endl;
			int s;
			cout << "Let's choose the function you want: " << endl;
			cin >> s;
			switch (s)
			{
			case 1: {break; };
			case 2: {break; };
			case 3: {break; };
			case 4: {
				menu(last, lst, pw, i);
				break; };

			default:
				system("cls");
				cout << "Incorrect,please enter again! " << endl;

				studentmenu(pw, y, lst, last, i);
			}
			break;
		}
	}
}
void changePassword(listpw &l, char user[50], char password[50])
{
	char check[50];
	char a[50], b[50];
	do
	{
		cout << "Enter your old password: ";
		cin >> check;
		if (strcmp(check, password) == 0)
		{
			do
			{
				cout << "Enter new password: ";
				inputpassword(a);
				cout << "Enter new password again: ";
				inputpassword(b);
				if (strcmp(a, b) == 0)
				{
					nodepw*p = l.head;
					while (p != NULL)
					{
						if (strcmp(p->data.user, user) == 0)
						{
							strcpy(p->data.pass, a);
							savePassword("D:/Password.csv", l);
							return;
						}
						p = p->next;
					}
				}
			} while (a != b);
		}
	} while ((strcmp(check, password) != 0) && cout << "Wrong!! Please do it again!" << endl);
}

int login(listpw pw, char y[])
{
	char user[9];
	char password[50];
	int index = 0;
	int temp = 0;
	cout << "Select: " << endl;
	do
	{
		cout << "1: Login" << endl;
		cout << "2: Change Password" << endl;
		cin >> temp;
	} while (temp > 2);
	do
	{
		if (index == 1) cout << "Please, Enter again" << endl;
		index = 0;
		cout << "username: ";
		cin >> user;
		cout << "password: ";
		inputpassword(password);
		if (temp == 1)
		{
			nodepw *lpw = pw.head;
			while (lpw != NULL)
			{
				if (strcmp(user, lpw->data.user) == 0 && strcmp(password, lpw->data.pass) == 0)
				{
					strcpy(y, user);
					if (user[0] < 'A')
						return 3;
					else if (strcmp(user, "admin") == 0)
						return 1;
					else
						return 2;
				}
				else index = 1;
				lpw = lpw->next;
			}
		}
		else changePassword(pw, user, password);
	} while (index == 1);
}
void menu(listallst &last, listst *&lst, listpw &pw, int &i)
{
	cout << "1: login" << endl;
	cout << "2: exit" << endl;
	int x;
	int x1;
	cout << "Please enter " << endl;
	cin >> x;
	char y[11];
	if (x == 1)
	{
		x1 = login(pw, y);
		if (x1 == 1)
		{
			system("cls");
			staffmenu(last, lst, pw, i);

		}
		if (x1 == 2)
		{
			system("cls");
			lecturermenu();

		}
		if (x1 == 3)
		{
			system("cls");
			studentmenu(pw, y, lst, last , i);
		}
	}
	else if (x == 2)
	{
		cout << "Have a nice day!" << endl;
		system("pause");
		exit(0);

	}
	else
	{
		system("cls");
		cout << "Invalid,please enter again!" << endl;

		menu(last, lst, pw, i);
	}
}

void main()
{
	listpw pw;
	listcr cr;
	char a[200];
	int size = listn();
	listst*lst = new listst[size];
	for (int i = 0; i < size; i++)
	{
		init(lst[i]);
	}
	listallst last;
	int k = loadPassword("Password.csv", pw, a);
	if (k)
	{
		k = savePassword("SavePassword.csv", pw);
		if (k)
		{
			cout << "Load Password file success full" << endl;
		}
	}
	int h = loadall(lst, last);
	if (h)
	{
		cout << "Load and save file successfull" << endl;
		//Khuc nay de test nha!!!!!!
		/*cout << lst[0].head->data.no << endl;
		cout << lst[1].tail->data.no << endl;
		cout << lst[2].head->data.no << endl;
		cout << lst[3].tail->data.no << endl;
		cout << lst[4].head->data.no << endl;
		cout << lst[5].tail->data.no << endl;*/
	}
	else cout << "Can't load data";
	int  ii = 0;
	menu(last, lst, pw, ii);
	_getch();
}
